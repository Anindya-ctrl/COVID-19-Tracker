{"version":3,"sources":["hooks/useCountries.js","utilities/utilities.js","components/Graph.jsx","components/Map.jsx","components/Table.jsx","components/InfoBox.jsx","components/App.jsx","index.js"],"names":["SET_COUNTRY_LIST","SET_SELECTED_COUNTRY_STATS","SET_CASES_IN_LAST_FOUR_MONTHS","reducer","state","type","payload","countryList","selectedCountryStats","casesInLastFourMonths","useCountries","selectedCountry","useReducer","dispatch","useEffect","fetch","then","res","json","data","map","name","country","cases","deaths","recovered","countryInfo","fetchURL","todayCases","todayRecovered","todayDeaths","formatLongNumber","number","toString","replace","sortCountryList","dataType","sort","a","b","Graph","className","graphData","Object","keys","forEach","date","newPointOnGraph","x","y","push","getGraphData","datasets","label","borderColor","circleConfigForCaseTypes","color","backgroundColor","pointHoverBackgroundColor","options","plugins","legend","display","tooltips","enabled","intersect","mode","Map","mapCenter","mapZoom","ChangeMapView","newCenter","newZoom","useMap","setView","getZoom","MapContainer","center","zoom","TileLayer","url","attribution","length","index","Circle","pathOptions","fillColor","lat","long","fillOpacity","radius","Math","sqrt","multiplier","Popup","style","backgroundImage","flag","Table","InfoBox","title","overallCases","onClick","active","Card","CardContent","borderTop","toLowerCase","Typography","marginBottom","App","useState","setSelectedCountry","setDataType","setMapCenter","setMapZoom","FormControl","Select","value","variant","onChange","event","target","MenuItem","ReactDOM","render","document","getElementById"],"mappings":"shBAGIA,EAIkB,mBAHlBC,EAI4B,4BAH5BC,EAI+B,gCAG7BC,EAAU,SAACC,EAAD,GAAgC,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,QAC5B,OAAOD,GACH,KAAKL,EACD,OAAO,2BACAI,GADP,IAEIG,YAAaD,EAAQC,cAE7B,KAAKN,EACD,OAAO,2BACAG,GADP,IAEII,qBAAsBF,EAAQE,uBAEtC,KAAKN,EACD,OAAO,2BACAE,GADP,IAEIK,sBAAuBH,EAAQG,wBAEvC,QACI,OAAOL,IAkEJM,MA9Df,WAA+C,IAAzBC,EAAwB,uDAAN,KACpC,EAA4BC,qBAAWT,EAAS,CAC5CI,YAAa,GACbC,qBAAsB,GACtBC,sBAAuB,KAH3B,mBAAQL,EAAR,KAAeS,EAAf,KA0DA,OApDAC,qBAAU,WACN,OAAOC,MAAM,4CACRC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OACNN,EAAS,CACLR,KAAML,EACNM,QAAS,CACLC,YAAaY,EAAKC,KAAI,kBAA+D,CAAEC,KAAjE,EAAGC,QAAoEC,MAAvE,EAAkBA,MAA4DC,OAA9E,EAAyBA,OAA6DC,UAAtF,EAAiCA,UAAgEC,YAAjG,EAA4CA,wBAInF,IAEHZ,qBAAU,WACN,IAAMa,EAA+B,WAApBhB,EAA+B,qCAA/B,mDAAmHA,GAEpI,OAAOA,GAAmBI,MAAMY,GAC3BX,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,IAAQI,EAAmFJ,EAAnFI,MAAOE,EAA4EN,EAA5EM,UAAWD,EAAiEL,EAAjEK,OAAQI,EAAyDT,EAAzDS,WAAYC,EAA6CV,EAA7CU,eAAgBC,EAA6BX,EAA7BW,YAAaJ,EAAgBP,EAAhBO,YAE3E,OAAOb,EAAS,CACZR,KAAMJ,EACNK,QAAS,CACLE,qBAAsB,CAClBe,QACAE,YACAD,SACAI,aACAC,iBACAC,cACAJ,uBAKrB,CAAEf,IAELG,qBAAU,WACN,OAAOC,MAAM,8DACRC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OACNN,EAAS,CACLR,KAAMH,EACNI,QAAS,CACLG,sBAAuBU,UAIxC,IAGIf,G,QC7FJ,SAAS2B,EAAiBC,GAC7B,cAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAQC,WAAWC,QAAQ,wBAAyB,KAGxD,SAASC,EAAgB5B,GAAgC,IAAnB6B,EAAkB,uDAAT,QAClD,OAAO,YAAI7B,GAAa8B,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEH,GAAYE,EAAEF,M,4BCmC5CI,MAjCf,YAAyC,IAAxBJ,EAAuB,EAAvBA,SAAUK,EAAa,EAAbA,UAEjBC,EDDH,SAAsBvB,GAAyB,IAAnBiB,EAAkB,uDAAT,QAClCM,EAAY,GAgBlB,OAbAvB,EAAKiB,IAAaO,OAAOC,KAAKzB,EAAKiB,IAAWS,SAAQ,SAAAC,GAGlD,GAFmB3B,EAAKiB,GAAUU,GAEb,CACjB,IAAMC,EAAkB,CACpBC,EAAGF,EACHG,EAAG9B,EAAKiB,GAAUU,IAGtBJ,EAAUQ,KAAKH,OAIhBL,EChBWS,CADgBzC,IAA1BD,sBAC8C2B,GAEtD,OACI,sBAAKK,UAAYA,EAAjB,UACI,qBAAIA,UAAU,cAAd,6BAA8CL,EAA9C,uBAEA,cAAC,IAAD,CACIjB,KAAM,CACFiC,SAAU,CAAC,CACPjC,KAAMuB,EACNW,MAAO,GACPC,YAAaC,IAAyBnB,GAAUoB,MAChDC,gBAAiBF,IAAyBnB,GAAUoB,MACpDE,0BAA2B,SAGnCC,QAAS,CACLC,QAAS,CACLC,OAAQ,CAAEC,SAAS,IAEvBC,SAAU,CACNC,SAAS,EACTC,WAAW,EACXC,KAAM,gB,oDC0BfC,MApDf,YAA6D,IAA9C/B,EAA6C,EAA7CA,SAAU7B,EAAmC,EAAnCA,YAAa6D,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,QAC7C,SAASC,EAAT,GAAgD,IAAvBC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,QAC1BpD,EAAMqD,cAIZ,OAHArD,EAAIsD,QAAQH,EAAWnD,EAAIuD,WAC3BvD,EAAIsD,QAAQH,EAAWC,GAEhB,KAGX,OACI,qBAAK/B,UAAU,MAAf,SACI,eAACmC,EAAA,EAAD,CACIC,OAAST,EACTU,KAAOT,EAFX,UAII,cAACU,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,2EAGZ1E,EAAY2E,QAAU3E,EAAYa,KAAI,SAACE,EAAS6D,GAAV,OAClC,cAACC,EAAA,EAAD,CAEIC,YAAa,CACT7B,MAAOD,IAAyBnB,GAAUoB,MAC1C8B,UAAW/B,IAAyBnB,GAAUoB,OAElDqB,OAAQ,CAAEvD,EAAQI,YAAY6D,IAAKjE,EAAQI,YAAY8D,MACvDC,YAAc,GACdC,OAASC,KAAKC,KAAKtE,EAAQc,IAAamB,IAAyBnB,GAAUyD,WAR/E,SAUI,cAACC,EAAA,EAAD,UACI,sBAAKrD,UAAU,aAAf,UACI,qBACIA,UAAU,kBACVsD,MAAO,CAAEC,gBAAgB,OAAD,OAAU1E,EAAQI,YAAYuE,KAA9B,QAE5B,qBAAKxD,UAAU,kBAAf,SAAiC,4BAAKnB,EAAQD,SAC9C,sBAAKoB,UAAU,mBAAf,oBAA2CV,EAAiBT,EAAQC,UACpE,sBAAKkB,UAAU,uBAAf,wBAAmDV,EAAiBT,EAAQG,cAC5E,sBAAKgB,UAAU,oBAAf,qBAA6CV,EAAiBT,EAAQE,iBAlBxE2D,MAwBlB,cAACb,EAAD,CAAeC,UAAYH,EAAYI,QAAUH,U,OCzBlD6B,MAvBf,YAA2C,IAA1B3F,EAAyB,EAAzBA,YAAa6B,EAAY,EAAZA,SAC1B,OACI,qCACI,qBAAIK,UAAU,cAAd,qCAAsDL,KACtD,qBAAKK,UAAU,QAAf,SAEI,gCACI,gCAEQlC,GAAe4B,EAAgB5B,EAAa6B,GAAUhB,KAAI,SAACE,EAAS6D,GAAV,OACtD,+BACI,+BAAMA,EAAQ,EAAd,KAAqB7D,EAAQD,QAC7B,6BAAI,4BAAKU,EAAiBT,EAAQc,UAF5B+C,gB,2BCa3BgB,MAvBf,YAA0E,IAAvDC,EAAsD,EAAtDA,MAAO7E,EAA+C,EAA/CA,MAAO8E,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,QAAS9C,EAAiB,EAAjBA,MAAO+C,EAAU,EAAVA,OAC3D,OACI,cAACC,EAAA,EAAD,CAAM/D,UAAU,WAAW6D,QAAUA,EAArC,SACI,eAACG,EAAA,EAAD,CACIhE,UAAU,iBACVsD,MAAO,CACHW,UAAWH,GAAM,qBAAmBhD,IAAyB6C,EAAMO,eAAenD,QAH1F,UAMI,cAACoD,EAAA,EAAD,CAAYpD,MAAM,gBAAlB,SAAoC4C,IAEpC,oBAAI3D,UAAU,iBAAiBsD,MAAO,CAAEvC,QAAOqD,aAAc,OAA7D,SAAwEtF,IAExE,eAACqF,EAAA,EAAD,CACInE,UAAU,yBACVe,MAAM,gBAFV,UAIM6C,EAJN,kB,uDC0FDS,MA7Ff,WACI,MAAgDC,mBAAS,UAAzD,mBAAQpG,EAAR,KAAyBqG,EAAzB,KACA,EAAkCD,mBAAS,SAA3C,mBAAQ3E,EAAR,KAAkB6E,EAAlB,KACA,EAAoCF,mBAAS,CAAC,GAAI,KAAlD,mBAAQ3C,EAAR,KAAmB8C,EAAnB,KACA,EAAgCH,mBAAS,GAAzC,mBAAQ1C,EAAR,KAAiB8C,EAAjB,KACA,EAA8CzG,EAAaC,GAAnDJ,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,qBAWrB,OATAM,qBAAU,WACNN,EAAqBkB,aAAewF,GAAa,iBAAM,CAAC1G,EAAqBkB,YAAY6D,IAAK/E,EAAqBkB,YAAY8D,WAChI,CAAEhF,IAQD,sBAAKiC,UAAU,MAAf,UACI,sBAAKA,UAAU,eAAf,UAGI,sBAAKA,UAAU,SAAf,UACI,kDAEA,cAAC2E,EAAA,EAAD,CAAa3E,UAAU,YAAvB,SACI,eAAC4E,EAAA,EAAD,CACIC,MAAQ3G,EACR4G,QAAQ,WACRC,SAjBI,SAAAC,GACxBT,EAAmBS,EAAMC,OAAOJ,OAChCH,EAAW,IAYK,UAKI,cAACQ,EAAA,EAAD,CAAUL,MAAM,SAAhB,oBAEI/G,EAAYa,KAAI,SAACE,EAAS6D,GAAV,OACZ,cAACwC,EAAA,EAAD,CAAwBL,MAAQhG,EAAQD,KAAxC,SAAiDC,EAAQD,MAAzC8D,cAQpC,qBAAK1C,UAAU,QAAf,SAEQjC,GACI,qCACI,cAAC,EAAD,CACI4F,MAAM,QACNG,OAAsB,UAAbnE,EACTb,MAAQQ,EAAgB,OAACvB,QAAD,IAACA,OAAD,EAACA,EAAsBoB,YAC/CyE,aAAetE,EAAgB,OAACvB,QAAD,IAACA,OAAD,EAACA,EAAsBe,OACtD+E,QAAU,kBAAMW,EAAY,UAC5BzD,MAAQD,IAAyBhC,MAAMiC,QAE3C,cAAC,EAAD,CACI4C,MAAM,YACNG,OAAsB,cAAbnE,EACTb,MAAQQ,EAAgB,OAACvB,QAAD,IAACA,OAAD,EAACA,EAAsBqB,gBAC/CwE,aAAetE,EAAgB,OAACvB,QAAD,IAACA,OAAD,EAACA,EAAsBiB,WACtD6E,QAAU,kBAAMW,EAAY,cAC5BzD,MAAQD,IAAyB9B,UAAU+B,QAE/C,cAAC,EAAD,CACI4C,MAAM,SACNG,OAAsB,WAAbnE,EACTb,MAAQQ,EAAgB,OAACvB,QAAD,IAACA,OAAD,EAACA,EAAsBsB,aAC/CuE,aAAetE,EAAgB,OAACvB,QAAD,IAACA,OAAD,EAACA,EAAsBgB,QACtD8E,QAAU,kBAAMW,EAAY,WAC5BzD,MAAQD,IAAyB/B,OAAOgC,aAQ5D,cAAC,EAAD,CACIY,UAAYA,EACZC,QAAUA,EACVjC,SAAWA,EACX7B,YAAcA,OAItB,cAACiG,EAAA,EAAD,CAAM/D,UAAU,gBAAhB,SACI,eAACgE,EAAA,EAAD,WACI,cAAC,EAAD,CAAOlG,YAAcA,EAAc6B,SAAWA,IAC9C,cAAC,EAAD,CAAOA,SAAWA,EAAWK,UAAU,mBChG3DmF,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,uB","file":"static/js/main.9c09f207.chunk.js","sourcesContent":["import { useReducer, useEffect } from 'react';\n\nconst {\n    SET_COUNTRY_LIST,\n    SET_SELECTED_COUNTRY_STATS,\n    SET_CASES_IN_LAST_FOUR_MONTHS\n} = {\n    SET_COUNTRY_LIST: 'set-country-list',\n    SET_SELECTED_COUNTRY_STATS: 'set-selected-country-info',\n    SET_CASES_IN_LAST_FOUR_MONTHS: 'set-cases-in-last-four-months'\n};\n\nconst reducer = (state, { type, payload }) =>  {\n    switch(type) {\n        case SET_COUNTRY_LIST:\n            return {\n                ...state,\n                countryList: payload.countryList,\n            }\n        case SET_SELECTED_COUNTRY_STATS:\n            return {\n                ...state,\n                selectedCountryStats: payload.selectedCountryStats,\n            }\n        case SET_CASES_IN_LAST_FOUR_MONTHS:\n            return {\n                ...state,\n                casesInLastFourMonths: payload.casesInLastFourMonths,\n            }\n        default:\n            return state;\n    }\n}\n\nfunction useCountries(selectedCountry = null) {\n    const [ state, dispatch ] = useReducer(reducer, {\n        countryList: [],\n        selectedCountryStats: {},\n        casesInLastFourMonths: [],\n    });\n\n    useEffect(() => {\n        return fetch('https://disease.sh/v3/covid-19/countries')\n            .then(res => res.json())\n            .then(data => (\n                dispatch({\n                    type: SET_COUNTRY_LIST,\n                    payload: {\n                        countryList: data.map(({ country: name, cases, deaths, recovered, countryInfo }) => ({ name, cases, deaths, recovered, countryInfo })),\n                    },\n                })\n            ));\n    }, []);\n\n    useEffect(() => {\n        const fetchURL = selectedCountry === 'Global' ? 'https://disease.sh/v3/covid-19/all' : `https://disease.sh/v3/covid-19/countries/${ selectedCountry }`;\n        \n        return selectedCountry && fetch(fetchURL)\n            .then(res => res.json())\n            .then(data => {\n                const { cases, recovered, deaths, todayCases, todayRecovered, todayDeaths, countryInfo } = data;\n\n                return dispatch({\n                    type: SET_SELECTED_COUNTRY_STATS,\n                    payload: {\n                        selectedCountryStats: {\n                            cases,\n                            recovered,\n                            deaths,\n                            todayCases,\n                            todayRecovered,\n                            todayDeaths,\n                            countryInfo,\n                        },\n                    }\n                });\n            });\n    }, [ selectedCountry ]);\n\n    useEffect(() => {\n        return fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n            .then(res => res.json())\n            .then(data => (\n                dispatch({\n                    type: SET_CASES_IN_LAST_FOUR_MONTHS,\n                    payload: {\n                        casesInLastFourMonths: data,\n                    }\n                })\n            ));\n    }, []);\n\n    // console.dir(state);\n    return state;\n}\n\nexport default useCountries;\n","export function formatLongNumber(number) {\n    return number?.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nexport function sortCountryList(countryList, dataType='cases') {\n    return [...countryList].sort((a, b) => b[dataType] - a[dataType]);\n}\n\nexport function getGraphData(data, dataType='cases') {\n    const graphData = [];\n    let lastPointOnGraph ;\n\n    data[dataType] && Object.keys(data[dataType]).forEach(date => {\n        lastPointOnGraph = data[dataType][date];\n\n        if(lastPointOnGraph) {\n            const newPointOnGraph = {\n                x: date,\n                y: data[dataType][date],\n            }\n\n            graphData.push(newPointOnGraph);\n        }\n    });\n\n    return graphData;\n}\n","import React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport useCountries from '../hooks/useCountries';\nimport { getGraphData } from '../utilities/utilities.js';\nimport { circleConfigForCaseTypes } from '../utilities/utilities.json';\nimport '../styles/Graph.css';\n\nfunction Graph({ dataType, className }) {\n    const { casesInLastFourMonths } = useCountries();\n    const graphData = getGraphData(casesInLastFourMonths, dataType);\n\n    return (\n        <div className={ className }>\n            <h3 className=\"graph-title\">Graph of global { dataType } in last 4 months</h3>\n            \n            <Line\n                data={{\n                    datasets: [{\n                        data: graphData,\n                        label: '',\n                        borderColor: circleConfigForCaseTypes[dataType].color,\n                        backgroundColor: circleConfigForCaseTypes[dataType].color,\n                        pointHoverBackgroundColor: 'red',\n                    }]\n                }}\n                options={{\n                    plugins: {\n                        legend: { display: false },\n                    },\n                    tooltips: {\n                        enabled: false,\n                        intersect: false,\n                        mode: 'index',\n                    },\n                }}\n            />\n        </div>\n    );\n}\n\nexport default Graph;\n","import React from 'react';\nimport { MapContainer, TileLayer, Circle, Popup, useMap } from 'react-leaflet';\nimport { formatLongNumber } from '../utilities/utilities';\nimport { circleConfigForCaseTypes } from '../utilities/utilities.json';\nimport '../styles/Map.css'\n\nfunction Map({ dataType, countryList, mapCenter, mapZoom }) {\n    function ChangeMapView({ newCenter, newZoom }) {\n        const map = useMap();\n        map.setView(newCenter, map.getZoom());\n        map.setView(newCenter, newZoom);\n      \n        return null;\n    }\n\n    return (\n        <div className=\"map\">\n            <MapContainer\n                center={ mapCenter }\n                zoom={ mapZoom }\n            >\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {\n                    countryList.length && countryList.map((country, index) => (\n                        <Circle\n                            key={ index }\n                            pathOptions={{\n                                color: circleConfigForCaseTypes[dataType].color,\n                                fillColor: circleConfigForCaseTypes[dataType].color,\n                            }}\n                            center={[ country.countryInfo.lat, country.countryInfo.long ]}\n                            fillOpacity={ 0.4 }\n                            radius={ Math.sqrt(country[dataType]) * circleConfigForCaseTypes[dataType].multiplier }\n                        >\n                            <Popup>\n                                <div className=\"info-popup\">\n                                    <div\n                                        className=\"info-popup-flag\"\n                                        style={{ backgroundImage: `url(${ country.countryInfo.flag })` }}\n                                    />\n                                    <div className=\"info-popup-name\"><b>{ country.name }</b></div>\n                                    <div className=\"info-popup-cases\">Cases: { formatLongNumber(country.cases) }</div>\n                                    <div className=\"info-popup-recovered\">Recovered: { formatLongNumber(country.recovered) }</div>\n                                    <div className=\"info-popup-deaths\">Deaths: { formatLongNumber(country.deaths) }</div>\n                                </div>\n                            </Popup>\n                        </Circle>\n                    ))\n                }\n                <ChangeMapView newCenter={ mapCenter } newZoom={ mapZoom } />\n            </MapContainer>\n        </div>\n    );\n}\n\nexport default Map;\n","import React from 'react';\nimport { sortCountryList, formatLongNumber } from '../utilities/utilities.js';\nimport '../styles/Table.css';\n\nfunction Table({ countryList, dataType }) {\n    return (\n        <>\n            <h3 className=\"table-title\">Countries with the most { dataType }</h3>\n            <div className=\"table\">\n\n                <table>\n                    <tbody>\n                        {\n                            countryList && sortCountryList(countryList, dataType).map((country, index) => (\n                                <tr key={ index }>\n                                    <td>{ index + 1 }. { country.name }</td>\n                                    <td><b>{ formatLongNumber(country[dataType]) }</b></td>\n                                </tr>\n                            ))\n                        }\n                    </tbody>\n                </table>\n            </div>\n        </>\n    );\n}\n\nexport default Table;\n","import React from 'react';\nimport { circleConfigForCaseTypes } from '../utilities/utilities.json';\nimport { Card, CardContent, Typography } from '@material-ui/core';\n\nfunction InfoBox({ title, cases, overallCases, onClick, color, active }) {\n    return (\n        <Card className=\"info-box\" onClick={ onClick }>\n            <CardContent\n                className=\"info-box-title\"\n                style={{\n                    borderTop: active && `10px solid ${ circleConfigForCaseTypes[title.toLowerCase()].color }`,\n                }}\n            >\n                <Typography color=\"textSecondary\">{ title }</Typography>\n\n                <h2 className=\"info-box-cases\" style={{ color, marginBottom: '8px' }}>{ cases }</h2>\n\n                <Typography\n                    className=\"info-box-overall-cases\"\n                    color=\"textSecondary\"\n                >\n                    { overallCases } Total</Typography>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default InfoBox;\n","import React, { useState, useEffect } from 'react';\nimport Graph from './Graph';\nimport Map from './Map';\nimport Table from './Table';\nimport InfoBox from './InfoBox';\nimport useCountries from '../hooks/useCountries';\nimport { formatLongNumber } from '../utilities/utilities';\nimport { circleConfigForCaseTypes } from '../utilities/utilities.json';\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport '../styles/App.css';\nimport '../styles/Header.css';\nimport '../styles/Stats.css';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n    const [ selectedCountry, setSelectedCountry ] = useState('Global');\n    const [ dataType, setDataType ] = useState('cases');\n    const [ mapCenter, setMapCenter ] = useState([10, 10]);\n    const [ mapZoom, setMapZoom ] = useState(2);\n    const { countryList, selectedCountryStats } = useCountries(selectedCountry);\n\n    useEffect(() => {\n        selectedCountryStats.countryInfo && setMapCenter(() => [selectedCountryStats.countryInfo.lat, selectedCountryStats.countryInfo.long]);\n    }, [ selectedCountryStats ]);\n\n    const handleCountryChange = event => {\n        setSelectedCountry(event.target.value);\n        setMapZoom(4);\n    }\n\n    return (\n        <div className=\"app\">\n            <div className=\"left-segment\">\n\n                {/* HEADER */}\n                <div className=\"header\">\n                    <h1>COVID-19 TRACKER</h1>\n\n                    <FormControl className=\"drop-down\">\n                        <Select\n                            value={ selectedCountry }\n                            variant=\"outlined\"\n                            onChange={ handleCountryChange }\n                        >\n                            <MenuItem value=\"Global\">Global</MenuItem>\n                            {\n                                countryList.map((country, index) => (\n                                    <MenuItem key={ index } value={ country.name }>{ country.name }</MenuItem>\n                                ))\n                            }\n                        </Select>\n                    </FormControl>\n                </div>\n\n                {/* STATISTICS */}\n                <div className=\"stats\">\n                    {\n                        selectedCountryStats && (\n                            <>\n                                <InfoBox\n                                    title=\"Cases\"\n                                    active={ dataType === 'cases' }\n                                    cases={ formatLongNumber(selectedCountryStats?.todayCases) } \n                                    overallCases={ formatLongNumber(selectedCountryStats?.cases) }\n                                    onClick={ () => setDataType('cases') }\n                                    color={ circleConfigForCaseTypes.cases.color }\n                                />\n                                <InfoBox \n                                    title=\"Recovered\"\n                                    active={ dataType === 'recovered' }\n                                    cases={ formatLongNumber(selectedCountryStats?.todayRecovered) } \n                                    overallCases={ formatLongNumber(selectedCountryStats?.recovered) }\n                                    onClick={ () => setDataType('recovered') }\n                                    color={ circleConfigForCaseTypes.recovered.color }\n                                />\n                                <InfoBox \n                                    title=\"Deaths\"\n                                    active={ dataType === 'deaths' }\n                                    cases={ formatLongNumber(selectedCountryStats?.todayDeaths) } \n                                    overallCases={ formatLongNumber(selectedCountryStats?.deaths) }\n                                    onClick={ () => setDataType('deaths') }\n                                    color={ circleConfigForCaseTypes.deaths.color }\n                                />\n                            </>\n                        )\n                    }\n                </div>\n\n                {/* MAP */}\n                <Map\n                    mapCenter={ mapCenter }\n                    mapZoom={ mapZoom }\n                    dataType={ dataType }\n                    countryList={ countryList }\n                />\n            </div>\n\n            <Card className=\"right-segment\">\n                <CardContent>\n                    <Table countryList={ countryList } dataType={ dataType } />\n                    <Graph dataType={ dataType } className=\"graph\" />\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('covid-19-tracker'));\n"],"sourceRoot":""}